# type your code for the Exercise here, and Run Document
samp1 %>%
summarise(ev=mean(area), med=median(area), sd=sd(area), min=min(area), max=max(area), iqr=IQR(area),
q1=quantile(area, 0.25), q3=quantile(area, 0.75))
# type your code for the Exercise here, and Run Document
samp1 %>%
summarise(ev=mean(area), med=median(area), sd=sd(area), min=min(area), max=max(area), iqr=IQR(area),
q1=quantile(area, 0.25), q3=quantile(area, 0.75))
# type your code for the Exercise here, and Run Document
samp1 %>%
summarise(ev=mean(area), med=median(area), sd=sd(area), min=min(area), max=max(area), iqr=IQR(area),
q1=quantile(area, 0.25), q3=quantile(area, 0.75))
library(statsr)
library(dplyr)
library(shiny)
library(ggplot2)
data(ames)
ggplot(data = ames, aes(x = area)) +
geom_histogram(binwidth = 250)
ames %>%
summarise(mu = mean(area), pop_med = median(area),
sigma = sd(area), pop_iqr = IQR(area),
pop_min = min(area), pop_max = max(area),
pop_q1 = quantile(area, 0.25),  # first quartile, 25th percentile
pop_q3 = quantile(area, 0.75))  # third quartile, 75th percentile
samp1 <- ames %>%
sample_n(size = 50)
# type your code for the Exercise here, and Run Document
samp1 %>%
summarise(ev=mean(area), med=median(area), sd=sd(area), min=min(area), max=max(area), iqr=IQR(area),
q1=quantile(area, 0.25), q3=quantile(area, 0.75))
# type your code for the Exercise here, and Run Document
samp1 %>%
summarise(ev=mean(area), med=median(area), sd=sd(area), iqr=IQR(area), min=min(area), max=max(area),
q1=quantile(area, 0.25), q3=quantile(area, 0.75))
samp1 %>%
summarise(x_bar = mean(area))
ames %>%
sample_n(size = 50) %>%
summarise(x_bar = mean(area))
sample_means50 <- ames %>%
rep_sample_n(size = 50, reps = 15000, replace = TRUE) %>%
summarise(x_bar = mean(area))
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
# type your code for the Exercise here, and Run Document
sample_means50 %>%
summarise(count=n(), mean=mean(x_bar), sd=sd(x_bar), iqr=IQR(x_bar), min=min(x_bar), max=max(x_bar),
q1=quantile(x_bar, 0.25), q3=quantile(x_bar, 0.75))
ggplot(data=sample_means50, aes(x=x_bar)) +
geom_histogram(binwidth=20)
# type your code for the Exercise here, and Run Document
sample_means_small <- ames %>%
rep_sample_n(size=10, reps = 25, replace=TRUE) %>%
summarise(x_bar = mean(area))
sample_means_small %>%
summarise(count=n(), mean=mean(x_bar), sd=sd(x_bar), iqr=IQR(x_bar), min=min(x_bar), max=max(x_bar),
q1=quantile(x_bar, 0.25), q3=quantile(x_bar, 0.75))
ggplot(data=sample_means_small, aes(x=x_bar)) +
geom_histogram(binwidth=20)
# type your code for the Exercise here, and Run Document
sample_means_small <- ames %>%
rep_sample_n(size=10, reps = 25, replace=TRUE)
sample_means_small %>%
summarise(count=n())
# type your code for the Exercise here, and Run Document
sample_means_small <- ames %>%
rep_sample_n(size=10, reps = 25, replace=TRUE) %>%
summarise(x_bar = mean(area))
sample_means_small %>%
summarise(count=n(), mean=mean(x_bar), sd=sd(x_bar), iqr=IQR(x_bar), min=min(x_bar), max=max(x_bar),
q1=quantile(x_bar, 0.25), q3=quantile(x_bar, 0.75))
ggplot(data=sample_means_small, aes(x=x_bar)) +
geom_histogram(binwidth=20)
# type your code for the Exercise here, and Run Document
sample_means_small <- ames %>%
rep_sample_n(size=10, reps = 25, replace=TRUE) %>%
summarise(x_bar = mean(area))
# type your code for Question 3 here, and Run Document
sample_means_small %>%
summarise(count=n(), mean=mean(x_bar), sd=sd(x_bar), iqr=IQR(x_bar), min=min(x_bar), max=max(x_bar),
q1=quantile(x_bar, 0.25), q3=quantile(x_bar, 0.75))
ggplot(data=sample_means_small, aes(x=x_bar)) +
geom_histogram(binwidth=20)
ggplot(data = sample_means50, aes(x = x_bar)) +
geom_histogram(binwidth = 20)
shinyApp(
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput("selected_var",
"Variable:",
choices = list("area", "price"),
selected = "area"),
numericInput("n_samp",
"Sample size:",
min = 1,
max = nrow(ames),
value = 30),
numericInput("n_sim",
"Number of samples:",
min = 1,
max = 30000,
value = 15000)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("sampling_plot"),
verbatimTextOutput("sampling_mean"),
verbatimTextOutput("sampling_se")
)
)
),
# Define server logic required to draw a histogram
server <- function(input, output) {
# create sampling distribution
sampling_dist <- reactive({
ames[[input$selected_var]] %>%
sample(size = input$n_samp * input$n_sim, replace = TRUE) %>%
matrix(ncol = input$n_samp) %>%
rowMeans() %>%
data.frame(x_bar = .)
#ames %>%
#  rep_sample_n(size = input$n_samp, reps = input$n_sim, replace = TRUE) %>%
#  summarise_(x_bar = mean(input$selected_var))
})
# plot sampling distribution
output$sampling_plot <- renderPlot({
x_min <- quantile(ames[[input$selected_var]], 0.1)
x_max <- quantile(ames[[input$selected_var]], 0.9)
ggplot(sampling_dist(), aes(x = x_bar)) +
geom_histogram() +
xlim(x_min, x_max) +
ylim(0, input$n_sim * 0.35) +
ggtitle(paste0("Sampling distribution of mean ",
input$selected_var, " (n = ", input$n_samp, ")")) +
xlab(paste("mean", input$selected_var)) +
theme(plot.title = element_text(face = "bold", size = 16))
})
# mean of sampling distribution
output$sampling_mean <- renderText({
paste0("mean of sampling distribution = ", round(mean(sampling_dist()$x_bar), 2))
})
# mean of sampling distribution
output$sampling_se <- renderText({
paste0("SE of sampling distribution = ", round(sd(sampling_dist()$x_bar), 2))
})
},
options = list(height = 500)
)
# type your code for this Exercise here, and Run Document
ames %>%
sample_n(size=50) %>%
summarise(mean_price = mean(price))
# type your code for this Exercise here, and Run Document
sample_means50 <- ames %>%
rep_sample_n(size=50, reps=5000, replace=TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data=sample_means50, aes(x=x_bar)) +
geom_histogram(binwidth = 100)
# type your code for this Exercise here, and Run Document
sample_means50 <- ames %>%
rep_sample_n(size=50, reps=5000, replace=TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data=sample_means50, aes(x=x_bar)) +
geom_histogram(binwidth = 1000)
# type your code for this Exercise here, and Run Document
sample_means50 <- ames %>%
rep_sample_n(size=50, reps=5000, replace=TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data=sample_means50, aes(x=x_bar)) +
geom_histogram(binwidth = 10000)
# type your code for this Exercise here, and Run Document
sample_means50 <- ames %>%
rep_sample_n(size=50, reps=5000, replace=TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data=sample_means50, aes(x=x_bar)) +
geom_histogram(binwidth = 5000)
# type your code for this Exercise here, and Run Document
sample_means50 <- ames %>%
rep_sample_n(size=50, reps=5000, replace=TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data=sample_means50, aes(x=x_bar)) +
geom_histogram(binwidth = 1000)
# type your code for this Exercise here, and Run Document
sample_means150 <- ames %>%
rep_sample_n(size=50, reps=5000, replace=TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data=sample_means50, aes(x=x_bar)) +
geom_histogram(binwidth = 1000)
# type your code for this Exercise here, and Run Document
sample_means150 <- ames %>%
rep_sample_n(size=50, reps=5000, replace=TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data=sample_means150, aes(x=x_bar)) +
geom_histogram(binwidth = 1000)
# type your code for this Exercise here, and Run Document
sample_means50 <- ames %>%
rep_sample_n(size=50, reps=5000, replace=TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data=sample_means50, aes(x=x_bar)) +
geom_histogram(binwidth = 10000)
# type your code for this Exercise here, and Run Document
sample_means150 <- ames %>%
rep_sample_n(size=50, reps=5000, replace=TRUE) %>%
summarise(x_bar = mean(price))
ggplot(data=sample_means150, aes(x=x_bar)) +
geom_histogram(binwidth = 10000)
set.seed(9102015)                 # make sure to change the seed
library(statsr)
library(dplyr)
library(ggplot2)
data(ames)
n <- 60
samp <- sample_n(ames, n)
# type your code for the Exercise here, and Knit
samp %>%
summarise(mean=mean(area), median=median(area), iqr=IQR(area), max=max(area), min=min(area), q1=quantile(area, 0.25), q3=quantile(area, 0.75))
z_star_95 <- qnorm(0.975)
z_star_95
samp %>%
summarise(lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
params <- ames %>%
summarise(mu = mean(area))
# type your code for the Exercise here, and Knit
params$mu
ci <- ames %>%
rep_sample_n(size = n, reps = 50, replace = TRUE) %>%
summarise(lower = mean(area) - z_star_95 * (sd(area) / sqrt(n)),
upper = mean(area) + z_star_95 * (sd(area) / sqrt(n)))
ci %>%
slice(1:5)
ci <- ci %>%
mutate(capture_mu = ifelse(lower < params$mu & upper > params$mu, "yes", "no"))
ci_data <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci$lower, ci$upper),
capture_mu = c(ci$capture_mu, ci$capture_mu))
View(ci_data)
View(ci_data)
View(ci)
View(ci)
ggplot(data = ci_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
View(ci_data)
View(ci_data)
ggplot(data = ci_data, aes(x = ci_bounds, y = ci_id,
group = ci_id, color = capture_mu)) +
geom_point(size = 2) +  # add points at the ends, size = 2
geom_line() +           # connect with lines
geom_vline(xintercept = params$mu, color = "darkgray") # draw vertical line
# type your code for the Question 5 here, and Knit
z_star_99 <- qnorm(0.995)
z_star_99
# type your code for the Exercise here, and Knit
ci_99 <- ames %>%
rep_sample_n(reps=50, size=n, replace=TRUE) %>%
summarise(lower = mean(area) - z_star_99 * sd(area) / sqrt(n),
upper = mean(area) + z_star_99 * sd(area) / sqrt(n)) %>%
mutate(capture_mu = ifelse(params$mu > lower & params$mu < upper, "yes", "no"))
ci_data_99 <- data.frame(ci_id = c(1:50, 1:50),
ci_bounds = c(ci_99$lower, ci_99$upper),
capture_mu = c(ci_99$capture_mu, ci_99$capture_mu))
ggplot(data=ci_data_99, aes(x=ci_bounds, y=ci_id, group=ci_id, colour=capture_mu)) +
geom_point(size=2) +
geom_line() +
geom_vline(xintercept = params$mu, color = "darkgrey")
pf(1.87, 7, 189, lower.tail = FALSE)
library(statsr)
library(dplyr)
library(ggplot2)
data(nc)
str(nc)
summary(nc$gained)
# type your code for the Question 3 here, and Knit
ggplot(data=nc) +
geom_boxplot(data=nc$habit) +
geom_boxplot(data=nc$weight)
# type your code for the Question 3 here, and Knit
ggplot(data=nc, aes(nc$habit, nc$weight)) +
geom_boxplot()
# type your code for the Question 3 here, and Knit
ggplot(data=nc, aes(factor(nc$habit), nc$weight)) +
geom_boxplot()
# type your code for the Question 3 here, and Knit
ggplot(data=nc, aes(nc$habit, nc$weight)) +
geom_boxplot()
# type your code for the Question 3 here, and Knit
ggplot(data=nc, aes(x=nc$habit, y=nc$weight)) +
geom_boxplot()
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
# type your code for the Question 5 here, and Knit
inference(data=nc, x=habit, y=weight, statistic = "mean", type = "ci", conf_level = 0.95, method = "theoretical")
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker","nonsmoker"))
# type your code for Question 6 here, and Knit
inference(data=nc, y=weeks, statistic = "mean", type = "ci", method = "theoretical", conf_level = 0.99)
# type your code for the Exercise here, and Knit
inference(data=nc, y=weeks, type = "ci", method = "theoretical", conf_level = 0.9)
# type your code for the Exercise here, and Knit
inference(data=nc, y=weeks, type = "ci", method = "theoretical", conf_level = 0.9, statistic = "mean")
# type your code for the Exercise here, and Knit
inference(data=nc, x=mature, y=weight, type = "ht", statistic = "mean", method = "theoretical", null = 0, alternative = "twosided")
# type your code for Question 7 here, and Knit
nc %>%
group_by(mature) %>%
summarise(max=max(mage), min=min(mage))
library(ggplot2)
library(dplyr)
load("brfss2013.RData")
mental_smoke_drink <- brfss2013 %>%
select(menthlth, alcday5, avedrnk2, smokday2)
mental_smoke_drink %>%
str()
ggplot(data=mental_smoke_summarise, aes(x=as.numeric(as.character(smok_intensity)), y=avg_bad_mental_day)) +
geom_bar()
ggplot(data=mental_smoke_summarise, aes(x=as.numeric(as.character(smok_intensity)), y=avg_bad_mental_day)) +
geom_histogram()
mental_smoke_summarise <- mental_smoke_drink %>%
select(smokday2, menthlth) %>%
filter(!is.na(menthlth), !is.na(smokday2)) %>%
mutate(smok_intensity = plyr::mapvalues(smokday2, c("Not at all", "Some days", "Every day"), c(0, 1, 2))) %>%
group_by(smok_intensity, smokday2) %>%
summarise(num_response = n(), avg_bad_mental_day = mean(menthlth))
mental_smoke_summarise
ggplot(data=mental_smoke_summarise, aes(x=as.numeric(as.character(smok_intensity)), y=avg_bad_mental_day)) +
geom_histogram()
ggplot(data=mental_smoke_summarise, aes(x=as.numeric(as.character(smok_intensity)), y=avg_bad_mental_day)) +
geom_bar()
ggplot(data=mental_smoke_summarise, aes(x=as.numeric(as.character(smok_intensity)), y=avg_bad_mental_day)) +
geom_bar(stat = "identity")
ggplot(data=mental_smoke_summarise, aes(x=smok_intensity, y=avg_bad_mental_day)) +
geom_bar(stat = "identity")
ggplot(data=mental_smoke_summarise, aes(x=smokday2, y=avg_bad_mental_day)) +
geom_bar(stat = "identity")
mental_smoke_summarise <- mental_smoke_drink %>%
select(smokday2, menthlth) %>%
filter(!is.na(menthlth), !is.na(smokday2)) %>%
group_by(smokday2) %>%
summarise(num_response = n(), avg_bad_mental_day = mean(menthlth))
mental_smoke_summarise
ggplot(data=mental_smoke_summarise, aes(x=smokday2, y=avg_bad_mental_day)) +
geom_bar(stat = "identity")
mental_smoke_summarise <- mental_smoke_drink %>%
select(smokday2, menthlth) %>%
filter(!is.na(menthlth), !is.na(smokday2)) %>%
mutate(smok_intensity = plyr::mapvalues(smokday2, c("Not at all", "Some days", "Every day"), c(0, 1, 2))) %>%
group_by(smok_intensity, smokday2) %>%
summarise(num_response = n(), avg_bad_mental_day = mean(menthlth))
mental_smoke_summarise
ggplot(data=mental_smoke_summarise, aes(x=as.numeric(as.character(smok_intensity)), y=avg_bad_mental_day)) +
geom_point() +
geom_line()
ggplot(data=age_edu_avgincome, aes(x=X_age_g, y=avg_income, group=factor(X_educag), colour=X_educag)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
income_age_edu <- brfss2013 %>%
select(income2, X_age_g, X_educag)
income_age_edu %>%
str()
fromVals <- c("Less than $10,000", "Less than $15,000", "Less than $20,000", "Less than $25,000", "Less than $35,000", "Less than $50,000", "Less than $75,000", "$75,000 or more")
toVals <- c(5000, 12500, 17500, 22500, 30000, 42500, 62500, 87500)
income_age_edu_disc <- income_age_edu %>%
filter(!is.na(income2), !is.na(X_age_g), !is.na(X_educag)) %>%
group_by(income2, X_age_g, X_educag) %>%
summarise(count = n()) %>%
mutate(income_disc = plyr::mapvalues(income2, fromVals, toVals))
income_age_edu_disc
age_edu_avgincome <- income_age_edu_disc %>%
mutate(total_income = as.numeric(as.character(income_disc)) * count) %>%
group_by(X_age_g, X_educag) %>%
summarise(avg_income = sum(total_income) / sum(count))
age_edu_avgincome
ggplot(data=age_edu_avgincome, aes(x=X_age_g, y=avg_income, group=factor(X_educag), colour=X_educag)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data=age_edu_avgincome, aes(x=X_age_g, y=avg_income, group=factor(X_educag), colour=X_educag)) +
geom_line() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
library(statsr)
library(dplyr)
library(ggplot2)
data(atheism)
us12 <- atheism %>%
filter(nationality == "United States" , atheism$year == "2012")
View(atheism)
View(atheism)
View(atheism)
View(atheism)
View(us12)
View(us12)
# type your code for Question 7 here, and Knit
us12 %>%
group_by(response) %>%
summarise(total=n(), proportion=n() / sum(n()))
# type your code for Question 7 here, and Knit
us12 %>%
group_by(response) %>%
summarise(total=n()) %>%
mutate(proportion=total/sum(total))
inference(y = response, data = us12, statistic = "proportion", type = "ci", method = "theoretical", success = "atheist")
d <- data.frame(p <- seq(0, 1, 0.01))
n <- 1000
d <- d %>%
mutate(me = 1.96*sqrt(p*(1 - p)/n))
ggplot(d, aes(x = p, y = me)) +
geom_line()
View(atheism)
View(atheism)
# type your code for Question 10 here, and Knit
sp0512 <- atheism %>%
filter(nationality='Spain', year = 2005 | year = 2012))
# type your code for Question 10 here, and Knit
sp0512 <- atheism %>%
filter(nationality='Spain', year = 2005 | year = 2012)
# type your code for Question 10 here, and Knit
sp0512 <- atheism %>%
filter(nationality='Spain', year == 2005 | year == 2012)
# type your code for Question 10 here, and Knit
sp0512 <- atheism %>%
filter(nationality=='Spain', year == 2005 | year == 2012)
View(sp0512)
View(sp0512)
# type your code for Question 10 here, and Knit
sp0512 <- atheism %>%
filter(nationality=='Spain', year == 2005 | year == 2012)
inference(data=sp0512, x=response, y=year, statistic = "proportion", type = "ht", success = "atheist", null = 0, alternative = "twoside")
# type your code for Question 10 here, and Knit
sp0512 <- atheism %>%
filter(nationality=='Spain', year == 2005 | year == 2012)
inference(data=sp0512, x=response, y=year, statistic = "proportion", type = "ht", success = "atheist", null = 0, alternative = "twoside", method = "theoretical")
View(sp0512)
View(sp0512)
# type your code for Question 10 here, and Knit
sp0512 <- atheism %>%
filter(nationality=='Spain', year == 2005 | year == 2012)
inference(data=sp0512, x=year, y=response, statistic = "proportion", type = "ht", success = "atheist", null = 0, alternative = "twoside", method = "theoretical")
# type your code for Question 10 here, and Knit
sp0512 <- atheism %>%
filter(nationality=='Spain', year == 2005 | year == 2012)
inference(data=sp0512, x=factor(year), y=response, statistic = "proportion", type = "ht", success = "atheist", null = 0, alternative = "twoside", method = "theoretical")
# type your code for Question 11 here, and Knit
us0512 <- atheism %>%
filter(nationality == "United States", year == 2005 | year == 2012)
inference(data=us0512, x=factor(year), y=response, statistic = "proportion", type = "ht", null = 0, alternative = "twoside", success = "atheist", method = "theoretical")
# type your code for Question 13 here, and Knit
p <- 0.5
z <- qnorm(p=0.95)
min_me <- 0.01
min_n <- (z * z * p * (1-p)) / (min_me * min_me)
min_n
# type your code for Question 13 here, and Knit
p <- 0.5
z <- qnorm(p=0.95, lower.tail = FALSE)
min_me <- 0.01
min_n <- (z * z * p * (1-p)) / (min_me * min_me)
min_n
# type your code for Question 13 here, and Knit
p <- 0.5
z <- qnorm(p=0.975)
min_me <- 0.01
min_n <- (z * z * p * (1-p)) / (min_me * min_me)
min_n
